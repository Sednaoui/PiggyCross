#! /usr/local/bin/python
# Creates empty boilerplate for the API if it does not exist yet.
#
# Needs to be generated manually. At repository root run:
# `python wallet-extension/bin/generate-api-skeleton.py`
#
# The naming of the API methods follows the Ethereum JSON-RPC convention.
# [See the current list of methods here.](https://eth.wiki/json-rpc/API#json-rpc-methods)

import os

API_ROOT = 'wallet-extension/src/background/api'
SUPPORTED_APIS = [
    # 'web3_clientVersion',
    # 'web3_sha3',
    # 'net_version',
    # 'net_peerCount',
    # 'net_listening',
    # 'eth_protocolVersion',
    # 'eth_syncing',
    # 'eth_coinbase',
    # 'eth_mining',
    # 'eth_hashrate',
    # 'eth_gasPrice',
    'eth_accounts',
    # 'eth_blockNumber',
    'eth_getBalance',
    # 'eth_getStorageAt',
    # 'eth_getTransactionCount',
    # 'eth_getBlockTransactionCountByHash',
    # 'eth_getBlockTransactionCountByNumber',
    # 'eth_getUncleCountByBlockHash',
    # 'eth_getUncleCountByBlockNumber',
    # 'eth_getCode',
    'eth_sign',
    # 'eth_signTransaction',
    'eth_sendTransaction',
    # 'eth_sendRawTransaction',
    'eth_call',
    # 'eth_estimateGas',
    # 'eth_getBlockByHash',
    # 'eth_getBlockByNumber',
    # 'eth_getTransactionByHash',
    # 'eth_getTransactionByBlockHashAndIndex',
    # 'eth_getTransactionByBlockNumberAndIndex',
    # 'eth_getTransactionReceipt',
    # 'eth_getUncleByBlockHashAndIndex',
    # 'eth_getUncleByBlockNumberAndIndex',
    # 'eth_getCompilers',
    # 'eth_compileLLL',
    # 'eth_compileSolidity',
    # 'eth_compileSerpent',
    # 'eth_newFilter',
    # 'eth_newBlockFilter',
    # 'eth_newPendingTransactionFilter',
    # 'eth_uninstallFilter',
    # 'eth_getFilterChanges',
    # 'eth_getFilterLogs',
    # 'eth_getLogs',
    # 'eth_getWork',
    # 'eth_submitWork',
    # 'eth_submitHashrate',
    # 'db_putString',
    # 'db_getString',
    # 'db_putHex',
    # 'db_getHex',
    # 'shh_post',
    # 'shh_version',
    # 'shh_newIdentity',
    # 'shh_hasIdentity',
    # 'shh_newGroup',
    # 'shh_addToGroup',
    # 'shh_newFilter',
    # 'shh_uninstallFilter',
    # 'shh_getFilterChanges',
    # 'shh_getMessages',
]

API_FILE_TEMPLATE = \
"""import log from 'loglevel';

interface Params {{ }}

// eslint-disable-next-line camelcase
export default function {api}(_params: Params): void {{
    log.error('wallet: "{api}" method is not implemented');
}}
"""

INDEX_FILE_TEMPLATE = \
"""// ! DO NOT EDIT THIS FILE BY HAND !
// File is generated from running wallet-extension/bin/generate-api-skeleton.py
// If this code needs to change, change the generation script.
//
// Needs to be generated manually. At repository root run:
// `python wallet-extension/bin/generate-api-skeleton.py`
//
// The naming of the API methods follows the Ethereum JSON-RPC convention.
// [See the current list of methods here.](https://eth.wiki/json-rpc/API#json-rpc-methods)

/* eslint-disable camelcase */
import log from 'loglevel';

{imports}

interface Message {{
    data: {{
        id: number;
        jsonrpc: string;
        method: string;
        params: Record<string, unknown>;
    }};
    name: string;
}}

export default function runApi(msg: Message): void {{
    switch (msg.data.method) {{
{cases}
        default:
            log.error(`wallet: ${{msg.data.method}} method is not recognized.`);
            break;
    }}
}}
"""
INDEX_IMPORT_TEMPLATE = "import {api} from './{api}';"
INDEX_CASE_TEMPLATE = \
"""        case '{api}':
            {api}(msg.data.params);
            break;"""

def main(supported_apis):
    # Write API file
    for api in supported_apis:
        api_file_path = os.path.join(API_ROOT, api) + '.ts'
        if not os.path.exists(api_file_path):
            writeFile(api_file_path, API_FILE_TEMPLATE.format(api=api))

    # Write index file
    supported_apis.sort()  # For correct ordering of imports in index.ts
    imports = map(lambda api: INDEX_IMPORT_TEMPLATE.format(api=api), supported_apis)
    imports = '\n'.join(imports)
    cases = map(lambda api: INDEX_CASE_TEMPLATE.format(api=api), supported_apis)
    cases = '\n'.join(cases)
    index_file = INDEX_FILE_TEMPLATE.format(imports=imports, cases=cases)
    index_file_path = os.path.join(API_ROOT, 'index.ts')
    writeFile(index_file_path, index_file)

def writeFile(path, content):
    path_dir =os.path.dirname(path)
    os.makedirs(path_dir, exist_ok=True)
    with open(path, 'w') as f:
        f.write(content)

if __name__ == '__main__':
    main(SUPPORTED_APIS)
